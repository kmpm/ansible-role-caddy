---
# tasks file for caddy
- name: Print Architecture
  debug: 
    msg: 
      - "Architecture:               {{ ansible_architecture }}"
      - "Distribution:               {{ ansible_distribution }}"
      - "Distribution Version:       {{ ansible_distribution_version }}"
      - "Distribution Major Version: {{ ansible_distribution_major_version }}"
      - "OS Family:                  {{ ansible_os_family }}"

- name: Gather variables for each architecture
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_architecture | lower }}.yml"


- name: Create directory for ansible custom facts
  ansible.builtin.file:
    state: directory
    path: /etc/ansible/facts.d
    mode: '0755'

- name: default caddy.fact
  copy:
    src: caddy.fact
    dest: /etc/ansible/facts.d/caddy.fact
    force: no
    mode: 0644
  notify:
    - reload ansible_local

- name: "reload ansible_local"
  setup:
    filter: "ansible_local"

- name: "create group '{{ caddy_group }}' for caddy"
  ansible.builtin.group:
    system: yes
    name: "{{ caddy_group }}"

- name: "create user '{{ caddy_user }}' for caddy "
  ansible.builtin.user:
    name: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    home: /var/lib/caddy
    shell: /bin/false
    system: yes

- name: create folders
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ caddy_tools_folder }}"
    - "{{ caddy_build_folder }}"


- name: install go if needed
  include_tasks: install-go.yml

- name: download xcaddy
  unarchive:
    src: "https://github.com/caddyserver/xcaddy/releases/download/v{{ xcaddy_version }}/xcaddy_{{ xcaddy_version }}_linux_{{ xcaddy_arch }}.tar.gz"
    dest:  "{{ caddy_tools_folder }}"
    remote_src: yes
    extra_opts:
      - xcaddy
    creates: "{{ caddy_tools_folder }}/xcaddy"


# - name: "build caddy"
#   shell:
#     cmd: "xcaddy build --output {{ caddy_build_output }} {{ ['--with'] | product(xcaddy_with) | map('join', ' ') | join(' ') }}"

#     chdir: "{{ caddy_build_folder }}"
#     creates: "{{ caddy_build_output }}"
#   register: xcaddy_build
#   environment:
#     - PATH: "/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin"
#     - GOENV: "{{ caddy_build_folder }}/var/go"
#     - GOCACHE: "{{ caddy_build_folder }}/var/go-build"
#     - MODCACHE: "{{ caddy_build_folder }}/var/pkg/mod"

- name: build caddy
  ansible.builtin.command:
    cmd: "xcaddy build --output {{ caddy_build_output }} {{ ['--with'] | product(xcaddy_with) | map('join', ' ') | join(' ') }}"
    chdir: "{{ caddy_build_folder }}"
    creates: "{{ caddy_build_output }}"
  register: xcaddy_build
  environment:
    - PATH: "/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin"
    - GOENV: "{{ caddy_build_folder }}/var/go"
    - GOCACHE: "{{ caddy_build_folder }}/var/go-build"
    - MODCACHE: "{{ caddy_build_folder }}/var/pkg/mod"

- name: 'debug caddy build'
  debug: var=xcaddy_build.stderr_lines
  when: xcaddy_build is defined and xcaddy_build.stderr_lines is defined

# - name: stop service
#   systemd:
#     name: caddy
#     state: stopped
#   when: xcaddy_build.changed
#   tags: molecule-notest

- name: replace old binary
  command: "mv {{ caddy_build_output }} {{ caddy_folder }}/caddy"
  args:
    removes: "{{ caddy_build_output }}"
  when: xcaddy_build.changed

- name: create folders for caddy runtime
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
  loop:
    - /etc/caddy
    - /var/lib/caddy

- name: configure caddy service
  template:
    src: caddy.service.j2
    dest: /etc/systemd/system/caddy.service
    mode: '0644'
  register: caddy_service

- name: configure caddyfile
  template:
    src: caddyfile.j2
    dest: /etc/caddy/Caddyfile
    mode: '0644'
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
  register: caddy_config

- name: make sure caddy has access to all it's files
  file:
    dest: "{{ item }}"
    recurse: yes
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
  loop:
    - /etc/caddy
    - /var/lib/caddy
  
- name: make sure caddy is (re)started and enabled
  debug: msg="enable and restart caddy"
  notify: restart caddy
  when: caddy_service.changed or caddy_config.changed
  tags: molecule-notest
