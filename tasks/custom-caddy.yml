---
- name: "install golang for {{ golang_arch }}"
  unarchive:
    src: "https://golang.org/dl/go{{ golang_version }}.linux-{{ golang_arch }}.tar.gz"
    dest: /usr/local
    remote_src: yes
    creates: /usr/local/go

- name: "get caddy Latest Release from Github"
  community.general.github_release:
    user: caddyserver
    repo: caddy
    action: latest_release
  register: caddy_release
  when: caddy_version == 'latest'

- name: "pick {{ caddy_release.tag[1:] }} as latest version of caddy"
  set_fact:
    caddy_version: "{{ caddy_release.tag[1:] }}"
    caddy_is_latest: true
  when: caddy_version == 'latest'

- name: "get xcaddy Latest Release from Github"
  community.general.github_release:
    user: caddyserver
    repo: xcaddy
    action: latest_release
  register: xcaddy_release
  when: xcaddy_version == 'latest'

- name: "pick {{ xcaddy_release.tag[1:] }} as latest version of xcaddy"
  set_fact:
    xcaddy_version: "{{ xcaddy_release.tag[1:] }}"
  when: xcaddy_version == 'latest'

- name: "download xcaddy {{ xcaddy_version }}"
  unarchive:
    src: "https://github.com/caddyserver/xcaddy/releases/download/v{{ xcaddy_version }}/xcaddy_{{ xcaddy_version }}_linux_{{ xcaddy_arch }}.tar.gz"
    dest:  "{{ caddy_tools_folder }}"
    remote_src: yes
    extra_opts:
      - xcaddy
    creates: "{{ caddy_tools_folder }}/xcaddy"
  register: xcaddy_update
  when: xcaddy_version is version(ansible_local['caddy']['current']['xcaddy_version'], '>')

- name: "update xcaddy to {{ xcaddy_version }} in custom facts"
  ini_file:
    path: /etc/ansible/facts.d/caddy.fact
    section: current
    option: xcaddy_version
    value: "{{ xcaddy_version }}"
    mode: '0644'
  notify:
    - reload ansible_local

- name: make sure required packages are installed
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - git
  when: caddy_is_latest is undefined

- name: will be building caddy if...
  debug:
    msg:
    - "caddy '{{ caddy_version }}' > '{{ ansible_local['caddy']['current']['version'] }}'"
    - "xcaddy '{{ xcaddy_version }}' > '{{ ansible_local['caddy']['current']['xcaddy_version'] }}'"
    - "with: '{{ xcaddy_with|join(', ') }}' != '{{ ansible_local['caddy']['current']['xcaddy_with'] }}'"

- name: build caddy if needed
  block:
    - name: build caddy
      ansible.builtin.command:
        cmd: "{{ caddy_tools_folder }}/xcaddy build --output {{ caddy_build_output }} {{ ['--with'] | product(xcaddy_with) | map('join', ' ') | join(' ') }}"
        chdir: "{{ caddy_build_folder }}"
        creates: "{{ caddy_build_output }}"
      register: xcaddy_build
      environment:
        - PATH: "/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin"
        - GOENV: "{{ caddy_build_folder }}/var/go"
        - GOCACHE: "{{ caddy_build_folder }}/var/go-build"
        - MODCACHE: "{{ caddy_build_folder }}/var/pkg/mod"
        - CADDY_VERSION: "{{ (caddy_is_latest is undefined)|ternary('v' + caddy_version, '') }}"

    # - name: 'debug caddy build'
    #   debug: var=xcaddy_build.stderr_lines
    #   when: xcaddy_build is defined and xcaddy_build.stderr_lines is defined

    - name: caddy cmd version
      command:
        cmd: "{{ caddy_build_output }} version"
      register: caddy_cmd_version

    - name: "pick caddy version {{ caddy_cmd_version.stdout[1:caddy_cmd_version.stdout.index(' ')] }} from {{ caddy_cmd_version.stdout }}"
      set_fact:
        caddy_version: "{{ caddy_cmd_version.stdout[1:caddy_cmd_version.stdout.index(' ')] }}"

    # - name: 'debug caddy cmd version'
    #   debug: var=caddy_cmd_version.stdout_lines
    #   # when: xcaddy_build is defined and xcaddy_build.stderr_lines is defined

    - name: update xcaddy_with to {{ xcaddy_with }} in custom facts
      ini_file:
        path: /etc/ansible/facts.d/caddy.fact
        section: current
        option: xcaddy_with
        value: "{{ xcaddy_with|join(', ') }}"
        mode: '0644'
      notify:
        - reload ansible_local
        
    - name: update caddy version to {{ caddy_version }} in custom facts
      ini_file:
        path: /etc/ansible/facts.d/caddy.fact
        section: current
        option: version
        value: "{{ caddy_version }}"
        mode: '0644'
      notify:
        - reload ansible_local

    - name: install new binary
      command: "mv {{ caddy_build_output }} {{ caddy_folder }}/caddy"
      args:
        removes: "{{ caddy_build_output }}"
      when: xcaddy_build.changed
  when: (caddy_version is version(ansible_local['caddy']['current']['version'], '>')) or
        (xcaddy_with|join(', ') != ansible_local['caddy']['current']['xcaddy_with'] ) or
        (xcaddy_update.changed)
  